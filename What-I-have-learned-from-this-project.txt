1. Create react app with vite. Visit [https://vite.dev/guide/] for more detail
--> npm init vite @latest . -- --template react OR npm create vite@latest
--> npm install
--> npm run dev

2. Install tailwindcss with Vite. Visit [https://v3.tailwindcss.com/docs/guides/vite] for more detail
--> npm install -D tailwindcss@3 postcss autoprefixer
--> npx tailwindcss init -p
--> Go to tailwind.config.js file and add "./index.html", "./src/**/*.{js,ts,jsx,tsx}", to content.
--> Add @tailwind base; @tailwind components; @tailwind utilities; to index.css

3. Config color in tailwind.config.js
--> Defining all your color tokens in one place guarantees that every component references the same values, making a 
global color change as simple as editing a single line in your config.
--> Tailwind scans only the classes you actually use (from your defined palette), so unused default colors are omitted entirely, keeping your CSS bundle minimal 
--> By pruning unused styles at build time, Tailwind’s new engine compiles your trimmed palette significantly faster—up to 5× faster full builds and 100× faster incremental builds

4.!!! [ERROR 1] 
When @apply a new tailwind config in index.css I have met the error of color class which I config 
in tailwind.config.js
--> All the color in the tailwind.config.js must be in the "color: {},"
--> Try to stop the server and npm run dev after any config to tailwind.

5. width: 100dvw;
--> More flexible than 100vw, always fit with the horizontial axis of browser even the scroll is exist/hide.

6. overflow-x: hidden
--> Hide everything that is overflow of x-axis of <body> tag. Do not allow the horizontial scroll to exist.

7. user-select: none 
--> Avoid user from choose or bold anything from the <body> text.

8. touch-action: none 
--> Don't allow the browser to hanlde any action such as zoom, scroll automatically.
--> All hanlde are design by the Javascript code.

9.  margin-inline-start: auto; margin-inline-end: auto; better than margin: 0 auto for the language which is written from left to right and 
apply the CSS Logical Properties.
--> Horizontal centering the element.

10. @layer utilities
--> Custom css class in tailwindcss

11. Create a new file index.js in utils and import all the materials of project instead of
refer directly from the public folder
--> Centralized Management
--> Increase the security
--> Easy to expand and config

12. Also create a new file index.js in Constants to export all of the products info instead of 
refer directly in component
--> Centralized Menagement
--> DRY (Don't repeat yourself) and Reusability

13. Using both header and nav in the header instead of the single one.
--> Semantic Clarity and Readability
--> Enhance SEO
--> One of the best practices

14. UseGSAP hook to make the component appear more smooth and flexible like animation
--> npm install gsap @gsap/react

15. Develop the frontend of the web base on the mobile first rules. Make sure the web run
smoothly on both desktop browser and mobile.
