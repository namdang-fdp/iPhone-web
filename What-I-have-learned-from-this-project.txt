1. Create react app with vite. Visit [https://vite.dev/guide/] for more detail
--> npm init vite @latest . -- --template react OR npm create vite@latest
--> npm install
--> npm run dev

2. Install tailwindcss with Vite. Visit [https://v3.tailwindcss.com/docs/guides/vite] for more detail
--> npm install -D tailwindcss@3 postcss autoprefixer
--> npx tailwindcss init -p
--> Go to tailwind.config.js file and add "./index.html", "./src/**/*.{js,ts,jsx,tsx}", to content.
--> Add @tailwind base; @tailwind components; @tailwind utilities; to index.css

3. Config color in tailwind.config.js
--> Defining all your color tokens in one place guarantees that every component references the same values, making a 
global color change as simple as editing a single line in your config.
--> Tailwind scans only the classes you actually use (from your defined palette), so unused default colors are omitted entirely, keeping your CSS bundle minimal 
--> By pruning unused styles at build time, Tailwind’s new engine compiles your trimmed palette significantly faster—up to 5× faster full builds and 100× faster incremental builds

4.!!! [ERROR 1] 
When @apply a new tailwind config in index.css I have met the error of color class which I config 
in tailwind.config.js
--> All the color in the tailwind.config.js must be in the "color: {},"
--> Try to stop the server and npm run dev after any config to tailwind.

5. width: 100dvw;
--> More flexible than 100vw, always fit with the horizontial axis of browser even the scroll is exist/hide.

6. overflow-x: hidden
--> Hide everything that is overflow of x-axis of <body> tag. Do not allow the horizontial scroll to exist.

7. user-select: none 
--> Avoid user from choose or bold anything from the <body> text.

8. touch-action: none 
--> Don't allow the browser to hanlde any action such as zoom, scroll automatically.
--> All hanlde are design by the Javascript code.

9.  margin-inline-start: auto; margin-inline-end: auto; better than margin: 0 auto for the language which is written from left to right and 
apply the CSS Logical Properties.
--> Horizontal centering the element.

10. @layer utilities
--> Custom css class in tailwindcss

11. Create a new file index.js in utils and import all the materials of project instead of
refer directly from the public folder
--> Centralized Management
--> Increase the security
--> Easy to expand and config

12. Also create a new file index.js in Constants to export all of the products info instead of 
refer directly in component
--> Centralized Menagement
--> DRY (Don't repeat yourself) and Reusability

13. Using both header and nav in the header instead of the single one.
--> Semantic Clarity and Readability
--> Enhance SEO
--> One of the best practices

14. UseGSAP hook to make the component appear more smooth and flexible like animation
--> npm install gsap @gsap/react

15. Develop the frontend of the web base on the mobile first rules. Make sure the web run
smoothly on both desktop browser and mobile.

16. The real meaning of Hero section - a section which appear first for the user when they 
login to the web. So that it should be impressive, it may include big-heading, simple description,
and the CTA button.

17. playsinline
--> Prevent video from full screen mode

18. Trick to gsap animation
--> Try to CSS opacity: 0 at the first followed by opacity: 1 and other animation provide by gsap 
to make the component appear smoothly

19. Install react-router
npm install react-router-dom

20. Change the main.jsx and app.jsx to adapt with the react-router

21. Add the pages and routes to implement more page in the FE react router.

22. Install the animated transition by using framer-motion 
--> npm install framer-motion

23. How to use the lucid-react icon in react to increase the UI/UX
--> npm install lucid-react

24. motion component
--> The motion component “supercharges” any HTML or SVG element with animation capabilities at up to 120 fps, 
outside of React’s render cycle for optimal performance

25. AnimatePresence Wrapper
--> By default, when React removes a component from the tree it disappears immediately. Wrapping conditional motion children in <AnimatePresence> 
lets you define exit animations before unmounting

26. How to implement the fake loading animation when transition to another page

27. How to implement the step button in the buy progress for customer

28. Implement grid container to in UI development

29. Use Framer-motion to implement the animation
--> AnimatePresence help the element to show off some animation before they are removed from
DOM tree.
--> mode='wait' means when the last component is completed it's animation the new component will 
appear.
--> <motion.div> a special <div> tag that supply by framer motion to implement the animation to div
--> Initial: the first anime when the component add to the DOM
--> animated: the state when the component is appear
--> exit: the state when the component is removed
--> transition: the time duration between the state

30. How to implement the smooth transition between the products image

31. Implement the carousel the hanlde the image transition

